CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)

# 프로젝트
PROJECT(QsLib VERSION 3.1.0 LANGUAGES C)

INCLUDE(CTest)
enable_testing()

# 빌드 타입
SET(CMAKE_BUILD_TYPE Release)
SET(CMAKE_VERBOSE_MAKEFILE true)

# 도구 설정
SET(CMAKE_C_STANDARD 17)

# 플랫폼과 컴파일러 옵션
SET(PROCESSOR ${CMAKE_HOST_SYSTEM_PROCESSOR})
MESSAGE(STATUS "프로세서 - ${PROCESSOR}")

IF(CMAKE_C_COMPILER_ID MATCHES "Clang|IntelLLVM")
	MESSAGE(STATUS "컴파일러 - Clang")
	ADD_COMPILE_OPTIONS(-W -Wall -Wextra -fvisibility=hidden)
	SET(CLANG TRUE)
	if (MSVC)
		SET(MSVC_CLANG TRUE)
	ENDIF()
ELSEIF(MSVC)
	MESSAGE(STATUS "컴파일러 - MSVC")
	ADD_COMPILE_OPTIONS(/Wall /D "_LIB" /D "_STATIC")
ELSE()
	MESSAGE(FATAL_ERROR "컴파일러 - 뭔지 모루게쏘요")
ENDIF()

if (WINDOWS)
	MESSAGE(STATUS "플랫폼 - 윈도우즈")
	if (MSVC)
		ADD_COMPILE_OPTIONS(/D "USE_D12" /D "USE_ES3")
	ELSE()
		ADD_COMPILE_OPTIONS(-DUSE_D12 -DUSE_ES3)
	ENDIF()
ELSEIF(EMSCRIPTEN)
	MESSAGE(STATUS "플랫폼 - EMSCRIPTEN")
	ADD_COMPILE_OPTIONS(-DUSE_ES3)
	ADD_LINK_OPTIONS(-sASYNCIFY)
ELSEIF(UNIX AND NOT APPLE)
	ADD_COMPILE_OPTIONS(-DUSE_ES3)
	if (CMAKE_SYSTEM_NAME MATCHES FreeBSD)
		MESSAGE(STATUS "플랫폼: FreeBSD")
		ADD_LINK_OPTIONS(-L/usr/local/lib)
	ELSEIF(LINUX)
		MESSAGE(STATUS "플랫폼 - LINUX")
	ELSE()
		MESSAGE(STATUS "플랫폼 - 알 수 없는 UNIX")
	ENDIF()
ELSEIF()
	MESSAGE(FATAL_ERROR "플랫폼 - 뭔지 몰게쓰여")
ENDIF()
if (NOT EMSCRIPTEN AND CLANG)
	MESSAGE(STATUS "추가 옵션 - FLTO")
	ADD_COMPILE_OPTIONS(-flto)
	ADD_LINK_OPTIONS(-flto)
	if (PROCESSOR MATCHES AMD64 OR PROCESSOR MATCHES amd64 OR PROCESSOR MATCHES x86_64)
		MESSAGE(STATUS "추가 옵션 - AVX2")
		ADD_COMPILE_OPTIONS(-mavx2)
	ENDIF()
ENDIF()

# 소스 위치
SET(QS_SRC_DIR ${CMAKE_SOURCE_DIR}/../../src)
SET(PATH_ZLIB ${QS_SRC_DIR}/qn/zlib)
SET(PATH_QN ${QS_SRC_DIR}/qn)
SET(QS_ZLIB_SRCS
	${PATH_ZLIB}/adler32.c ${PATH_ZLIB}/compress.c ${PATH_ZLIB}/crc32.c ${PATH_ZLIB}/deflate.c ${PATH_ZLIB}/gzclose.c ${PATH_ZLIB}/gzlib.c ${PATH_ZLIB}/gzread.c ${PATH_ZLIB}/gzwrite.c ${PATH_ZLIB}/infback.c ${PATH_ZLIB}/inffast.c ${PATH_ZLIB}/inflate.c ${PATH_ZLIB}/inftrees.c ${PATH_ZLIB}/trees.c ${PATH_ZLIB}/uncompr.c ${PATH_ZLIB}/zutil.c)
SET(QS_QN_SRCS
	${PATH_QN}/PatrickPowell_snprintf.c
	${PATH_QN}/qn.c ${PATH_QN}/qn_debug.c ${PATH_QN}/qn_file.c ${PATH_QN}/qn_hash.c ${PATH_QN}/qn_mem.c ${PATH_QN}/qn_mlu.c ${PATH_QN}/qn_sort.c ${PATH_QN}/qn_str.c ${PATH_QN}/qn_thd.c ${PATH_QN}/qn_time.c ${PATH_QN}/qm_math.c ${PATH_QN}/qs_gam.c)
INCLUDE_DIRECTORIES(
	${CMAKE_SOURCE_DIR}/../../inc
	${QS_SRC_DIR})

# 만들기
if (EMSCRIPTEN)
ADD_LIBRARY(qs STATIC ${QS_QN_SRCS})
ELSE()
ADD_LIBRARY(qs SHARED ${QS_QN_SRCS} ${QS_ZLIB_SRCS})
ENDIF()

# 인스톨
INSTALL(TARGETS qs DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

SET(CPACK_PROJECT_NAME ${PROJECT_NAME})
SET(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
INCLUDE(CPack)
